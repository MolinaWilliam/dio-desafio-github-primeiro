*- Repositório onde ficam meus arquivos
	remote origin 

*- Repositório principal, onde pego as alterações 
	upstream 

*- Sempre que for fazer commit tem que pegar as alterações


***********************************************************************************
**************************        COMANDOS         ********************************
***********************************************************************************

*- Baixa alterações
	git fetch upstream master

*- Mescla alterações
	git merge origin/master


*- Faz o fetch e o pull juntos
	git pull upstream master 

	Verifica alterações e mescla com o código meu fonte
	depois do pull, analisar arquivos mexidos e remover
	codigo desnecessário/resolver conflitos

*- Adicionar arquivo stage (arquivos que serão comitados)
	via vs coder

*- Adiciona todos os arquivos alterados ao stage
	git add .

*- Adiciona mensagem ao commit e comita
	git commit -m "mensagem"

*- Revierte el Ultimo commit Realizado antes de git push
	git reset HEAD~1

*- Envia todos os commits anteriores ao repositório origin
	git push origin master

*************************************************
Generar public/private rsa key
*************************************************
ssh-keygen -t rsa -b 4096 -C "william.molina@csistemas.com.br"

*************************************************
Configurar usuario
*************************************************

git config --global user.name "william molina"
git config --global user.email "william.molina@csistemas.com.br"

*************************************************
Configurar editor
*************************************************

git config --global core.editor nombre_editor

*************************************************
Conocer el valor de una llave
*************************************************

git config nombre_de_la_llave 
git config user.name 

repuesta:  $ william molina

*************************************************
Conocer lista de configuraciones de git
*************************************************

git config --list


*************************************************
Clonar un repositorio
*************************************************

git clone git@ssh.dev.azure.com:v3/paulocezar/ces.adm.compras/ces.adm.compras.conversor

*************************************************
Inicializar un repositorio
*************************************************

git init

*************************************************
Editando un archivo en el editor de git
*************************************************

tecla 	i 		se habilitara la edicion
tecla  esc		cerrara la edicion
tecla	:		iniciar comando
tecla 	:w		escrivir + salvar
tecla	:q + enter	salir


*************************************************
estadoS de un archivo en git
*************************************************

SIN MARCAR	SIN MODIFICAR	  MODIFICADO	  VERSIONADO

untraked	unmodified	  modified	  staged
		|		  |		  |		
-- add file --> |-- edit file --> |		  |
		|		  |		  |
		|		  |- stage file ->|
		|		  |		  |
<- remove file -|		  |		  |
		|		  |		  |
		|<----------- commit ------------ |	

DESPUES DEL COMMIT LOS ARCHIVOS REGRESAN AL ESTADO SIN MODIFICAR


************************************************* 
conocer el estado de un repositorio git
*************************************************

git status


************************************************* 
agregar archivos al repositorio git
*************************************************

git add .      				todos los archivos
git add ruta_file/nombre_file		archivo correspondiente de la ruta

git commit -m "mensage_del_comit"
git commit -am "mensage_del_comit"	se puede utilizar para hacer add . y el commit de una vez

************************************************* 
git log repositorio git
*************************************************

git log
git log --decorated
git log --author="nombre_o_Parte_delnombre_del_autor"
git shortlog  		muestra cuales autores y cuantos commit ellos hicieron
git shortlog =sn	muestra cuantos commit fureron hechos por cada autor
git log --graph

****************************************************** 
mostrar los cambios que fueron realizados en un commit
******************************************************

git show tag
git show asd687d6asf69aydwekjgoasfy70p		

***********************************************************************
mostrar los cambios realisados antes de hacer un commit
***********************************************************************

git diff
git diff --name-only  		muestra solo el nombre de los archivos editados

******************************************************* 
revertiendo - resetear cambios en el repositorio git
*******************************************************

git revert asd687d6asf69aydwekjgoasfy70p		revierte el commit sin eliminar el historico de los cambios realizados

git checkout nombre_file				elimina cambios agregados en el archivo antes de git add .

git reset HEAD nombre_file				retira el archivo del estado staged, osea lo regresa antes de add.


para estos comandos se necesita utilizar el "tag" del comiit anterior dado que el actual sera elimminado
_______________________________________________________________________________________________________
			
git reset --soft asd687d6asf69aydwekjgoasfy70p 		revierte el commit pero mantiene los cambios para ser commit de nuevo osea despues de add .
git reset --mixed					revierte el commit antes del add .			
git reset --hard					revierte el commit completamente incllusive 

***********************************************************************
Repositorios remotos
***********************************************************************

se necesita configurar un repositorio en el servicio remoto

ejemplo visitar: https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

ssh-keygen -t ed25519 -C "your_email@example.com"	crea llave publica

git remote						muestra si un repositorio local esta conectado con uno remoto ejemplo:github
git remote -v						igual pero muestra mas informacion

****************************************************** 
clonando repositorio remoto en su computador
******************************************************

git clone direccion_del_repositorio				direccion proporcionada por el servicio remoto. Ejemplo GitHub
								clona el repositorio con el mismo nombre del repositorio
git clone direccion_del_repositorio nombre_nueva_carpeta 	clona el repositorio con el nombre de esa nueva carpeta


****************************************************** 
eviar todos los cambios al repositorio remoto
******************************************************

git push origin master		la palabra "origin" es el nombre de la conexion remota configurada 
				la palabra "master" es el nombre del branch en el que se esta trabajando


****************************************************** 
creando un fork del repositorio remoto
******************************************************

Fork Es una herramienta proporcionada por el servicio remoto y permite realizar una copia del repositorio para poder realizar cambios 
en el proyecto sin afectar nada en el momento de ocurrir un error. 


****************************************************** 
branch repositorio remoto
******************************************************

Son aputados a un commit especifico para realizar modificaciones, 
sin altenar el projecto original (master) que se en mi computador local

git checkout -b nombre_branch		crea un nuevo branch
git branch 				muestra los branch e indica cual es el branch activo colocando un * antes del nombre
git checkout nombre_branch 		cambia al branch indicado en nombre_branch
git checkout -D nombre_branch		eliminar un nuevo branch
 
mezclando branch repositorio remoto
________________________________________

estando en el branch principal master:

git merge nombre_branch			abrira el editor mecionando que va a realizar la union de la informacion
					presionar :wq   para guardar y salir 
git rebase nombre_branch


****************************************************** 
Archivo git ignore 
******************************************************

https://git-scm.com/docs/gitignore

	.gitignore Sendo que estou a implantar o nosso sistema em uma empresa onde os funcionários são comissionados

****************************************************** 
comandos utiles				05996096994
******************************************************

git stash
---------				
git stash save "Nombre_modificaciones" 	el guarda las modificaciones hechas antes del add . 
										pero no las muestra en el git status

git stash apply							aplica los cambios guardados mas recientes y los muestra en el git status
git stash apply stash@{n}               aplica los cambios guardados mas antiguo invocados en el identificador de array {n}.

git stash list							lista las modificaciones guardadas

git stash clear							elimina todas las modificaciones guardadas y no se podran recuperar 



git config
-----------
git config --global alias.s status      crea la ejecucion de un comando al utilizar el alias creado en este caso s. 
					si ejecuto git s se ejecutara git status


git tag 
--------
git tag -a 1.0.0 -m "mensage"		sirve para crear tags (versiones)
git tag -d 1.0.0			eimina la tag a nivel local en mi computador
git push origin:1.0.0			eimina la tag a nivel del servicio remoto
git tags 				muestra todas la tags creadas
git push origin master --tags		sube las tags al repositorio remoto
